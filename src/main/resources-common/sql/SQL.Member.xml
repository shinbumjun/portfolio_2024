<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.lhs.dao.MemberDao">
	<!-- resultType은 반드시 있어야 함 -->
	<select id="memberList" parameterType="HashMap" resultType="HashMap">
	
	</select>
	
	
	<select id="totalMemberCnt" parameterType="HashMap" resultType="int">
	
	</select>
	
	<select id="getMemberById" parameterType="HashMap" resultType="HashMap">
	
	</select>
	
	<select id="makeCipherText" parameterType="map" resultType="String">
	SELECT SHA2(MD5(#{memberPw}), 256) AS pw
	</select>
	
	<!-- 
		  회원가입시 중복 ID확인
		 memberId          member_id  
		 public int checkId(HashMap<String, String> params);
	-->
	<select id="checkId" parameterType="MemberDto" resultType="int">
		SELECT count(*)
		FROM S_shinbumjun.`member`
		where member_id = #{memberId};
	</select>
	
	<!-- 
		 회원가입
		 memberId          member_id  
		 memberName        member_name
		 memberPw          member_pw
		 memberNick        member_nick
		 email	           email
		 
		 public int join(HashMap<String, String> params);  	 
	-->
	<insert id="join" parameterType="MemberDto">
    	INSERT INTO S_shinbumjun.member
    	(type_seq, member_id, member_pw, member_name, member_nick, email, create_dtm, update_dtm, membercol)
    	VALUES (1, #{memberId}, #{memberPw}, #{memberName}, #{memberNick}, #{email}, DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), DATE_FORMAT(NOW(), '%Y%m%d%H%i%s'), NULL);
	</insert>

	<!--  
		  로그인시 ID와 비밀번호가 일치하는지 확인
		 public MemberDto Loginchick(HashMap<String, String> params);
		 memberId          member_id  
	-->
	<select id="Loginchick" parameterType="String" resultType="MemberDto">
		SELECT member_idx, type_seq, member_id, member_pw, member_name, member_nick, email, create_dtm, update_dtm, membercol
		FROM S_shinbumjun.`member`
		where member_id = #{memberId};
	</select>
	
	<!-- 
		  회원가입 완료하면 이메일로 환영문자 보내기
		 public MemberDto Welcomeemail(String email); 
		 -> 
		  이메일이 중복일수도 있기 때문에 중복으로 가입은 될 수 있게 하려고 email이 아닌 MemberDto를 매개변수로 담았음
		 public MemberDto Welcomeemail(MemberDto memberDto);
		 
	-->
	<select id="Welcomeemail" parameterType="String" resultType="MemberDto">
		SELECT member_idx, type_seq, member_id, member_pw, member_name, member_nick, email, create_dtm, update_dtm, membercol
		FROM S_shinbumjun.`member`
		where email = #{email}
		and member_id = #{memberId}
	</select>
	
	<!--  
		    비밀번호 찾기
		  public MemberDto Passwordchick(MemberDto memberDto);
		  memberId        member_id  
	 	  email	          email
	-->
	<select id="Passwordchick" parameterType="map" resultType="MemberDto">
		SELECT member_idx, type_seq, member_id, member_pw, member_name, member_nick, email, create_dtm, update_dtm, membercol
		FROM S_shinbumjun.`member`
		where member_id = #{memberId}
		and email = #{email};
	</select>
	
	<!--  
		    비밀번호 변경
		  public int pwchange(MemberDto memberDto);
		  
	 	  memberPw          member_pw (변경)
	 	  memberId          member_id (조건)
		  email	          email     (조건)
		  
		  UPDATE S_shinbumjun.member
		  SET member_pw=12345
		  WHERE member_id='sinbumjun' AND email='sinbumjun123@naver.com';
	-->
	<update id="pwchange" parameterType="MemberDto">
	    UPDATE S_shinbumjun.member
	    SET member_pw = #{memberPw}
	    WHERE member_id = #{memberId}
	    AND email = #{email};
	</update>

	<!-- 
		별명가져오기
		public MemberDto Nick(MemberDto memberDto);
	 -->
	 <select id="Nick" parameterType="MemberDto" resultType="MemberDto">
	 	select member_nick
	 	from S_shinbumjun.`member`
	 	where member_id = #{memberId};
	 </select>
	 
	<delete id = "delMember" parameterType="HashMap">
		
	</delete>		

</mapper>







